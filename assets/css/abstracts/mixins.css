// Stay Dripped Mobile IV - Advanced SCSS Mixins

// Responsive breakpoints
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

// Advanced transition mixin
@mixin transition($properties...) {
  $transition-list: ();

  @each $property in $properties {
    @if length($property) == 1 {
      $transition-list: append(
        $transition-list,
        #{$property}
          map-get($transition-duration, 200)
          map-get($transition-timing, out),
        comma
      );
    } @else {
      $transition-list: append($transition-list, $property, comma);
    }
  }

  transition: $transition-list;
}

// Container mixin
@mixin container($max-width: xl) {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding-left: map-get($spacing, 4);
  padding-right: map-get($spacing, 4);

  @if map-has-key($container-max-widths, $max-width) {
    max-width: map-get($container-max-widths, $max-width);
  }

  @include respond-to(sm) {
    padding-left: map-get($spacing, 6);
    padding-right: map-get($spacing, 6);
  }

  @include respond-to(lg) {
    padding-left: map-get($spacing, 8);
    padding-right: map-get($spacing, 8);
  }
}

// Button base styles
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  text-align: center;
  vertical-align: middle;
  user-select: none;
  border: none;
  cursor: pointer;
  text-decoration: none;
  outline: none;

  @include transition(all);

  &:focus {
    outline: 2px solid $color-info;
    outline-offset: 2px;
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }
}

// Button size variants
@mixin button-size($size: "md") {
  @if $size == "sm" {
    padding: map-get($spacing, 2) map-get($spacing, 3);
    font-size: map-get($fs-scale, sm);
    border-radius: map-get($border-radius, base);
    min-height: 2rem;
  } @else if $size == "md" {
    padding: map-get($spacing, 3) map-get($spacing, 6);
    font-size: map-get($fs-scale, base);
    border-radius: map-get($border-radius, md);
    min-height: 2.5rem;
  } @else if $size == "lg" {
    padding: map-get($spacing, 4) map-get($spacing, 8);
    font-size: map-get($fs-scale, lg);
    border-radius: map-get($border-radius, lg);
    min-height: 3rem;
  }
}

// Button variant styles
@mixin button-variant($variant: "primary") {
  @if $variant == "primary" {
    background: linear-gradient(
      145deg,
      $color-primary,
      darken($color-primary, 10%)
    );
    color: $color-secondary;
    box-shadow: map-get($shadow, md);

    &:hover {
      background: linear-gradient(
        145deg,
        lighten($color-primary, 5%),
        $color-primary
      );
      box-shadow: map-get($shadow, lg);
      transform: translateY(-1px);
    }

    &:active {
      transform: translateY(0);
      box-shadow: map-get($shadow, base);
    }
  } @else if $variant == "secondary" {
    background: $color-secondary;
    color: $color-primary;
    border: 2px solid $color-primary;
    box-shadow: map-get($shadow, sm);

    &:hover {
      background: $color-primary;
      color: $color-secondary;
      box-shadow: map-get($shadow, md);
    }
  } @else if $variant == "outline" {
    background: transparent;
    color: $color-primary;
    border: 2px solid $color-primary;

    &:hover {
      background: $color-primary;
      color: $color-secondary;
    }
  } @else if $variant == "ghost" {
    background: transparent;
    color: $color-primary;
    border: none;
    box-shadow: none;

    &:hover {
      background: rgba($color-primary, 0.1);
    }
  }
}

// Card styles
@mixin card($elevated: false) {
  background: $color-secondary;
  border-radius: map-get($border-radius, lg);
  overflow: hidden;

  @include transition(transform, box-shadow);

  @if $elevated {
    box-shadow: map-get($shadow, lg);

    &:hover {
      transform: translateY(-4px);
      box-shadow: map-get($shadow, xl);
    }
  } @else {
    box-shadow: map-get($shadow, base);

    &:hover {
      transform: translateY(-2px);
      box-shadow: map-get($shadow, lg);
    }
  }
}

// Text utilities
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Screen reader only
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Focus styles
@mixin focus-ring($color: $color-info) {
  outline: 2px solid $color;
  outline-offset: 2px;
}

// Generate utility classes
@mixin generate-spacing-utilities {
  @each $name, $value in $spacing {
    .m-#{$name} {
      margin: $value !important;
    }
    .mt-#{$name} {
      margin-top: $value !important;
    }
    .mr-#{$name} {
      margin-right: $value !important;
    }
    .mb-#{$name} {
      margin-bottom: $value !important;
    }
    .ml-#{$name} {
      margin-left: $value !important;
    }
    .mx-#{$name} {
      margin-left: $value !important;
      margin-right: $value !important;
    }
    .my-#{$name} {
      margin-top: $value !important;
      margin-bottom: $value !important;
    }

    .p-#{$name} {
      padding: $value !important;
    }
    .pt-#{$name} {
      padding-top: $value !important;
    }
    .pr-#{$name} {
      padding-right: $value !important;
    }
    .pb-#{$name} {
      padding-bottom: $value !important;
    }
    .pl-#{$name} {
      padding-left: $value !important;
    }
    .px-#{$name} {
      padding-left: $value !important;
      padding-right: $value !important;
    }
    .py-#{$name} {
      padding-top: $value !important;
      padding-bottom: $value !important;
    }
  }
}

@mixin generate-typography-utilities {
  @each $name, $size in $fs-scale {
    .text-#{$name} {
      font-size: $size !important;
    }
  }
}

// Dark mode support mixin - for use at root level
@mixin dark-mode {
  @media (prefers-color-scheme: dark) {
    @content;
  }

  .dark {
    @content;
  }
}

// Dark mode support mixin - for use within selectors
@mixin dark-mode-nested {
  @media (prefers-color-scheme: dark) {
    @content;
  }

  .dark & {
    @content;
  }
}

// Aspect ratio
@mixin aspect-ratio($width, $height) {
  position: relative;

  &::before {
    content: "";
    display: block;
    padding-top: percentage($height / $width);
  }

  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

// Grid utilities
@mixin grid-container($columns: $grid-columns, $gap: $grid-gutter) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// Flexbox utilities
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

// Animations
@mixin slide-in-up($duration: 0.3s) {
  transform: translateY(100%);
  opacity: 0;
  animation: slide-in-up $duration ease-out forwards;
}

@keyframes slide-in-up {
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@mixin fade-in($duration: 0.3s, $delay: 0s) {
  opacity: 0;
  animation: fade-in $duration ease-out #{$delay} forwards;
}

@keyframes fade-in {
  to {
    opacity: 1;
  }
}
